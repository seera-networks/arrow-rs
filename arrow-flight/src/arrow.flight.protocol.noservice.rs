// This file was automatically generated through the build.rs script, and should not be edited.

// This file is @generated by prost-build.
///
/// The request that a client provides to a server on handshake.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HandshakeRequest {
    ///
    /// A defined protocol version
    #[prost(uint64, tag = "1")]
    pub protocol_version: u64,
    ///
    /// Arbitrary auth/handshake info.
    #[prost(bytes = "bytes", tag = "2")]
    pub payload: ::prost::bytes::Bytes,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HandshakeResponse {
    ///
    /// A defined protocol version
    #[prost(uint64, tag = "1")]
    pub protocol_version: u64,
    ///
    /// Arbitrary auth/handshake info.
    #[prost(bytes = "bytes", tag = "2")]
    pub payload: ::prost::bytes::Bytes,
}
///
/// A message for doing simple auth.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BasicAuth {
    #[prost(string, tag = "2")]
    pub username: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub password: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Empty {}
///
/// Describes an available action, including both the name used for execution
/// along with a short description of the purpose of the action.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActionType {
    #[prost(string, tag = "1")]
    pub r#type: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub description: ::prost::alloc::string::String,
}
///
/// A service specific expression that can be used to return a limited set
/// of available Arrow Flight streams.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Criteria {
    #[prost(bytes = "bytes", tag = "1")]
    pub expression: ::prost::bytes::Bytes,
}
///
/// An opaque action specific for the service.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Action {
    #[prost(string, tag = "1")]
    pub r#type: ::prost::alloc::string::String,
    #[prost(bytes = "bytes", tag = "2")]
    pub body: ::prost::bytes::Bytes,
}
///
/// The request of the CancelFlightInfo action.
///
/// The request should be stored in Action.body.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CancelFlightInfoRequest {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<FlightInfo>,
}
///
/// The request of the RenewFlightEndpoint action.
///
/// The request should be stored in Action.body.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RenewFlightEndpointRequest {
    #[prost(message, optional, tag = "1")]
    pub endpoint: ::core::option::Option<FlightEndpoint>,
}
///
/// An opaque result returned after executing an action.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Result {
    #[prost(bytes = "bytes", tag = "1")]
    pub body: ::prost::bytes::Bytes,
}
///
/// The result of the CancelFlightInfo action.
///
/// The result should be stored in Result.body.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CancelFlightInfoResult {
    #[prost(enumeration = "CancelStatus", tag = "1")]
    pub status: i32,
}
///
/// Wrap the result of a getSchema call
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SchemaResult {
    /// The schema of the dataset in its IPC form:
    ///    4 bytes - an optional IPC_CONTINUATION_TOKEN prefix
    ///    4 bytes - the byte length of the payload
    ///    a flatbuffer Message whose header is the Schema
    #[prost(bytes = "bytes", tag = "1")]
    pub schema: ::prost::bytes::Bytes,
}
///
/// The name or tag for a Flight. May be used as a way to retrieve or generate
/// a flight or be used to expose a set of previously defined flights.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FlightDescriptor {
    #[prost(enumeration = "flight_descriptor::DescriptorType", tag = "1")]
    pub r#type: i32,
    ///
    /// Opaque value used to express a command. Should only be defined when
    /// type = CMD.
    #[prost(bytes = "bytes", tag = "2")]
    pub cmd: ::prost::bytes::Bytes,
    ///
    /// List of strings identifying a particular dataset. Should only be defined
    /// when type = PATH.
    #[prost(string, repeated, tag = "3")]
    pub path: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Nested message and enum types in `FlightDescriptor`.
pub mod flight_descriptor {
    ///
    /// Describes what type of descriptor is defined.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum DescriptorType {
        /// Protobuf pattern, not used.
        Unknown = 0,
        ///
        /// A named path that identifies a dataset. A path is composed of a string
        /// or list of strings describing a particular dataset. This is conceptually
        ///   similar to a path inside a filesystem.
        Path = 1,
        ///
        /// An opaque command to generate a dataset.
        Cmd = 2,
    }
    impl DescriptorType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unknown => "UNKNOWN",
                Self::Path => "PATH",
                Self::Cmd => "CMD",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "UNKNOWN" => Some(Self::Unknown),
                "PATH" => Some(Self::Path),
                "CMD" => Some(Self::Cmd),
                _ => None,
            }
        }
    }
}
///
/// The access coordinates for retrieval of a dataset. With a FlightInfo, a
/// consumer is able to determine how to retrieve a dataset.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FlightInfo {
    /// The schema of the dataset in its IPC form:
    ///    4 bytes - an optional IPC_CONTINUATION_TOKEN prefix
    ///    4 bytes - the byte length of the payload
    ///    a flatbuffer Message whose header is the Schema
    #[prost(bytes = "bytes", tag = "1")]
    pub schema: ::prost::bytes::Bytes,
    ///
    /// The descriptor associated with this info.
    #[prost(message, optional, tag = "2")]
    pub flight_descriptor: ::core::option::Option<FlightDescriptor>,
    ///
    /// A list of endpoints associated with the flight. To consume the
    /// whole flight, all endpoints (and hence all Tickets) must be
    /// consumed. Endpoints can be consumed in any order.
    ///
    /// In other words, an application can use multiple endpoints to
    /// represent partitioned data.
    ///
    /// If the returned data has an ordering, an application can use
    /// "FlightInfo.ordered = true" or should return the all data in a
    /// single endpoint. Otherwise, there is no ordering defined on
    /// endpoints or the data within.
    ///
    /// A client can read ordered data by reading data from returned
    /// endpoints, in order, from front to back.
    ///
    /// Note that a client may ignore "FlightInfo.ordered = true". If an
    /// ordering is important for an application, an application must
    /// choose one of them:
    ///
    /// * An application requires that all clients must read data in
    ///    returned endpoints order.
    /// * An application must return the all data in a single endpoint.
    #[prost(message, repeated, tag = "3")]
    pub endpoint: ::prost::alloc::vec::Vec<FlightEndpoint>,
    /// Set these to -1 if unknown.
    #[prost(int64, tag = "4")]
    pub total_records: i64,
    #[prost(int64, tag = "5")]
    pub total_bytes: i64,
    ///
    /// FlightEndpoints are in the same order as the data.
    #[prost(bool, tag = "6")]
    pub ordered: bool,
    ///
    /// Application-defined metadata.
    ///
    /// There is no inherent or required relationship between this
    /// and the app_metadata fields in the FlightEndpoints or resulting
    /// FlightData messages. Since this metadata is application-defined,
    /// a given application could define there to be a relationship,
    /// but there is none required by the spec.
    #[prost(bytes = "bytes", tag = "7")]
    pub app_metadata: ::prost::bytes::Bytes,
}
///
/// The information to process a long-running query.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PollInfo {
    ///
    /// The currently available results.
    ///
    /// If "flight_descriptor" is not specified, the query is complete
    /// and "info" specifies all results. Otherwise, "info" contains
    /// partial query results.
    ///
    /// Note that each PollInfo response contains a complete
    /// FlightInfo (not just the delta between the previous and current
    /// FlightInfo).
    ///
    /// Subsequent PollInfo responses may only append new endpoints to
    /// info.
    ///
    /// Clients can begin fetching results via DoGet(Ticket) with the
    /// ticket in the info before the query is
    /// completed. FlightInfo.ordered is also valid.
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<FlightInfo>,
    ///
    /// The descriptor the client should use on the next try.
    /// If unset, the query is complete.
    #[prost(message, optional, tag = "2")]
    pub flight_descriptor: ::core::option::Option<FlightDescriptor>,
    ///
    /// Query progress. If known, must be in \[0.0, 1.0\] but need not be
    /// monotonic or nondecreasing. If unknown, do not set.
    #[prost(double, optional, tag = "3")]
    pub progress: ::core::option::Option<f64>,
    ///
    /// Expiration time for this request. After this passes, the server
    /// might not accept the retry descriptor anymore (and the query may
    /// be cancelled). This may be updated on a call to PollFlightInfo.
    #[prost(message, optional, tag = "4")]
    pub expiration_time: ::core::option::Option<::prost_types::Timestamp>,
}
///
/// A particular stream or split associated with a flight.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FlightEndpoint {
    ///
    /// Token used to retrieve this stream.
    #[prost(message, optional, tag = "1")]
    pub ticket: ::core::option::Option<Ticket>,
    ///
    /// A list of URIs where this ticket can be redeemed via DoGet().
    ///
    /// If the list is empty, the expectation is that the ticket can only
    /// be redeemed on the current service where the ticket was
    /// generated.
    ///
    /// If the list is not empty, the expectation is that the ticket can
    /// be redeemed at any of the locations, and that the data returned
    /// will be equivalent. In this case, the ticket may only be redeemed
    /// at one of the given locations, and not (necessarily) on the
    /// current service.
    ///
    /// In other words, an application can use multiple locations to
    /// represent redundant and/or load balanced services.
    #[prost(message, repeated, tag = "2")]
    pub location: ::prost::alloc::vec::Vec<Location>,
    ///
    /// Expiration time of this stream. If present, clients may assume
    /// they can retry DoGet requests. Otherwise, it is
    /// application-defined whether DoGet requests may be retried.
    #[prost(message, optional, tag = "3")]
    pub expiration_time: ::core::option::Option<::prost_types::Timestamp>,
    ///
    /// Application-defined metadata.
    ///
    /// There is no inherent or required relationship between this
    /// and the app_metadata fields in the FlightInfo or resulting
    /// FlightData messages. Since this metadata is application-defined,
    /// a given application could define there to be a relationship,
    /// but there is none required by the spec.
    #[prost(bytes = "bytes", tag = "4")]
    pub app_metadata: ::prost::bytes::Bytes,
}
///
/// A location where a Flight service will accept retrieval of a particular
/// stream given a ticket.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Location {
    #[prost(string, tag = "1")]
    pub uri: ::prost::alloc::string::String,
}
///
/// An opaque identifier that the service can use to retrieve a particular
/// portion of a stream.
///
/// Tickets are meant to be single use. It is an error/application-defined
/// behavior to reuse a ticket.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ticket {
    #[prost(bytes = "bytes", tag = "1")]
    pub ticket: ::prost::bytes::Bytes,
}
///
/// A batch of Arrow data as part of a stream of batches.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FlightData {
    ///
    /// The descriptor of the data. This is only relevant when a client is
    /// starting a new DoPut stream.
    #[prost(message, optional, tag = "1")]
    pub flight_descriptor: ::core::option::Option<FlightDescriptor>,
    ///
    /// Header for message data as described in Message.fbs::Message.
    #[prost(bytes = "bytes", tag = "2")]
    pub data_header: ::prost::bytes::Bytes,
    ///
    /// Application-defined metadata.
    #[prost(bytes = "bytes", tag = "3")]
    pub app_metadata: ::prost::bytes::Bytes,
    ///
    /// The actual batch of Arrow data. Preferably handled with minimal-copies
    /// coming last in the definition to help with sidecar patterns (it is
    /// expected that some implementations will fetch this field off the wire
    /// with specialized code to avoid extra memory copies).
    #[prost(bytes = "bytes", tag = "1000")]
    pub data_body: ::prost::bytes::Bytes,
}
/// *
/// The response message associated with the submission of a DoPut.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PutResult {
    #[prost(bytes = "bytes", tag = "1")]
    pub app_metadata: ::prost::bytes::Bytes,
}
///
/// The result of a cancel operation.
///
/// This is used by CancelFlightInfoResult.status.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CancelStatus {
    /// The cancellation status is unknown. Servers should avoid using
    /// this value (send a NOT_FOUND error if the requested query is
    /// not known). Clients can retry the request.
    Unspecified = 0,
    /// The cancellation request is complete. Subsequent requests with
    /// the same payload may return CANCELLED or a NOT_FOUND error.
    Cancelled = 1,
    /// The cancellation request is in progress. The client may retry
    /// the cancellation request.
    Cancelling = 2,
    /// The query is not cancellable. The client should not retry the
    /// cancellation request.
    NotCancellable = 3,
}
impl CancelStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "CANCEL_STATUS_UNSPECIFIED",
            Self::Cancelled => "CANCEL_STATUS_CANCELLED",
            Self::Cancelling => "CANCEL_STATUS_CANCELLING",
            Self::NotCancellable => "CANCEL_STATUS_NOT_CANCELLABLE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CANCEL_STATUS_UNSPECIFIED" => Some(Self::Unspecified),
            "CANCEL_STATUS_CANCELLED" => Some(Self::Cancelled),
            "CANCEL_STATUS_CANCELLING" => Some(Self::Cancelling),
            "CANCEL_STATUS_NOT_CANCELLABLE" => Some(Self::NotCancellable),
            _ => None,
        }
    }
}
